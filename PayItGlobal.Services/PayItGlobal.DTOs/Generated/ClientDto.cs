//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace PayItGlobal.DTOs.Generated
{

    public partial class ClientDto
    {
        #region Constructors

        public ClientDto() {
        }

        public ClientDto(int clientID, int? franchiseID, string name, System.Guid addedByID, System.DateTime addedDate, string addressLine1, string addressLine2, string city, int stateProvinceID, string phone, string fax, string postalCode, System.DateTime? modifiedDate, string email, string contactFname, int mvcCmsPortalID, string contactLname, bool setupIsComplete, bool active, bool usesSalesReceipts, bool usesQB, bool usesQBOE, string connectionTicket, bool usesUnitQuantity, bool usesQBOEOld, int? invoicesToRemember, bool qBInvoiceEachJob, bool qBNameLastFirst, bool qBSkippBillingAddrLine1, bool qBDefaultOnDemand, bool qBDefaultInvoiceStyleOnly, bool initialSyncIsDone, bool qBUsesClasses, bool usesOnlineRegistration, bool usesCardSwipe, bool usesWebGenPOS, bool usesQBNonInvoiced, bool skipCustomersFromQB, bool qBLoadInitialPrice, bool usesConvenienceFee, bool sendFailMailOnlyToClient, string ccforallreceipts, bool usesemployeepay, decimal? srpriceperhour, decimal? srpricepershift, decimal? convenienceFeeAmount, bool qBCreateInvoiceOnFail, bool combinedSettlement, bool usesClientCustomerID, decimal? convenienceFeeMaxCCAmount, bool usesZeeWiseImport, string nameOnApplication, bool usesFromExternalCheckout, bool convenienceFeeIsPercent, string qboeOauthAccessToken, string qboeOauthAccessTokenSecret, bool usesSlCreatePublicUser, string qboeOauthRealmId, int? qboeOauthDataSource, bool pauseCardVerify, bool qBCreateInvoiceOnRecurFail, bool infoFromClientNeeded, bool preInvoiceMonthlyRecur, bool usesSchoolLeader, bool usesSalesForce, bool usesSfCreatePublicUser, bool usesAmexBlue, bool usesAdobeSign, bool processSptAsSingleTransaction, bool usesQbLocations, bool usesSchoolLeaderArOnly, string qboeOauthVersion, System.DateTime? qboeOauthLastConnectTime, System.DateTime? qboeOauthLastRefreshTime, string qboeOauth2AccessToken, System.DateTime? qboeOauth2LastConnectTime, bool usesDocusign, int? encKeyID, int? affiliateID, bool usesProcare, decimal? achConvenienceFeeAmount, decimal? lateFeeCc, decimal? lateFeeAch, UserDto payEzCreator, List<PayOnlinePortalDto> portals, List<UserDto> users_ClientID, StateProvinceDto stateProvince) {

          this.ClientID = clientID;
          this.FranchiseID = franchiseID;
          this.Name = name;
          this.AddedByID = addedByID;
          this.AddedDate = addedDate;
          this.AddressLine1 = addressLine1;
          this.AddressLine2 = addressLine2;
          this.City = city;
          this.StateProvinceID = stateProvinceID;
          this.Phone = phone;
          this.Fax = fax;
          this.PostalCode = postalCode;
          this.ModifiedDate = modifiedDate;
          this.Email = email;
          this.ContactFname = contactFname;
          this.MvcCmsPortalID = mvcCmsPortalID;
          this.ContactLname = contactLname;
          this.SetupIsComplete = setupIsComplete;
          this.Active = active;
          this.UsesSalesReceipts = usesSalesReceipts;
          this.UsesQB = usesQB;
          this.UsesQBOE = usesQBOE;
          this.ConnectionTicket = connectionTicket;
          this.UsesUnitQuantity = usesUnitQuantity;
          this.UsesQBOEOld = usesQBOEOld;
          this.InvoicesToRemember = invoicesToRemember;
          this.QBInvoiceEachJob = qBInvoiceEachJob;
          this.QBNameLastFirst = qBNameLastFirst;
          this.QBSkippBillingAddrLine1 = qBSkippBillingAddrLine1;
          this.QBDefaultOnDemand = qBDefaultOnDemand;
          this.QBDefaultInvoiceStyleOnly = qBDefaultInvoiceStyleOnly;
          this.InitialSyncIsDone = initialSyncIsDone;
          this.QBUsesClasses = qBUsesClasses;
          this.UsesOnlineRegistration = usesOnlineRegistration;
          this.UsesCardSwipe = usesCardSwipe;
          this.UsesWebGenPOS = usesWebGenPOS;
          this.UsesQBNonInvoiced = usesQBNonInvoiced;
          this.SkipCustomersFromQB = skipCustomersFromQB;
          this.QBLoadInitialPrice = qBLoadInitialPrice;
          this.UsesConvenienceFee = usesConvenienceFee;
          this.SendFailMailOnlyToClient = sendFailMailOnlyToClient;
          this.Ccforallreceipts = ccforallreceipts;
          this.Usesemployeepay = usesemployeepay;
          this.Srpriceperhour = srpriceperhour;
          this.Srpricepershift = srpricepershift;
          this.ConvenienceFeeAmount = convenienceFeeAmount;
          this.QBCreateInvoiceOnFail = qBCreateInvoiceOnFail;
          this.CombinedSettlement = combinedSettlement;
          this.UsesClientCustomerID = usesClientCustomerID;
          this.ConvenienceFeeMaxCCAmount = convenienceFeeMaxCCAmount;
          this.UsesZeeWiseImport = usesZeeWiseImport;
          this.NameOnApplication = nameOnApplication;
          this.UsesFromExternalCheckout = usesFromExternalCheckout;
          this.ConvenienceFeeIsPercent = convenienceFeeIsPercent;
          this.QboeOauthAccessToken = qboeOauthAccessToken;
          this.QboeOauthAccessTokenSecret = qboeOauthAccessTokenSecret;
          this.UsesSlCreatePublicUser = usesSlCreatePublicUser;
          this.QboeOauthRealmId = qboeOauthRealmId;
          this.QboeOauthDataSource = qboeOauthDataSource;
          this.PauseCardVerify = pauseCardVerify;
          this.QBCreateInvoiceOnRecurFail = qBCreateInvoiceOnRecurFail;
          this.InfoFromClientNeeded = infoFromClientNeeded;
          this.PreInvoiceMonthlyRecur = preInvoiceMonthlyRecur;
          this.UsesSchoolLeader = usesSchoolLeader;
          this.UsesSalesForce = usesSalesForce;
          this.UsesSfCreatePublicUser = usesSfCreatePublicUser;
          this.UsesAmexBlue = usesAmexBlue;
          this.UsesAdobeSign = usesAdobeSign;
          this.ProcessSptAsSingleTransaction = processSptAsSingleTransaction;
          this.UsesQbLocations = usesQbLocations;
          this.UsesSchoolLeaderArOnly = usesSchoolLeaderArOnly;
          this.QboeOauthVersion = qboeOauthVersion;
          this.QboeOauthLastConnectTime = qboeOauthLastConnectTime;
          this.QboeOauthLastRefreshTime = qboeOauthLastRefreshTime;
          this.QboeOauth2AccessToken = qboeOauth2AccessToken;
          this.QboeOauth2LastConnectTime = qboeOauth2LastConnectTime;
          this.UsesDocusign = usesDocusign;
          this.EncKeyID = encKeyID;
          this.AffiliateID = affiliateID;
          this.UsesProcare = usesProcare;
          this.AchConvenienceFeeAmount = achConvenienceFeeAmount;
          this.LateFeeCc = lateFeeCc;
          this.LateFeeAch = lateFeeAch;
          this.PayEzCreator = payEzCreator;
          this.Portals = portals;
          this.Users_ClientID = users_ClientID;
          this.StateProvince = stateProvince;
        }

        #endregion

        #region Properties

        public int ClientID { get; set; }

        public int? FranchiseID { get; set; }

        public string Name { get; set; }

        public System.Guid AddedByID { get; set; }

        public System.DateTime AddedDate { get; set; }

        public string AddressLine1 { get; set; }

        public string AddressLine2 { get; set; }

        public string City { get; set; }

        public int StateProvinceID { get; set; }

        public string Phone { get; set; }

        public string Fax { get; set; }

        public string PostalCode { get; set; }

        public System.DateTime? ModifiedDate { get; set; }

        public string Email { get; set; }

        public string ContactFname { get; set; }

        public int MvcCmsPortalID { get; set; }

        public string ContactLname { get; set; }

        public bool SetupIsComplete { get; set; }

        public bool Active { get; set; }

        public bool UsesSalesReceipts { get; set; }

        public bool UsesQB { get; set; }

        public bool UsesQBOE { get; set; }

        public string ConnectionTicket { get; set; }

        public bool UsesUnitQuantity { get; set; }

        public bool UsesQBOEOld { get; set; }

        public int? InvoicesToRemember { get; set; }

        public bool QBInvoiceEachJob { get; set; }

        public bool QBNameLastFirst { get; set; }

        public bool QBSkippBillingAddrLine1 { get; set; }

        public bool QBDefaultOnDemand { get; set; }

        public bool QBDefaultInvoiceStyleOnly { get; set; }

        public bool InitialSyncIsDone { get; set; }

        public bool QBUsesClasses { get; set; }

        public bool UsesOnlineRegistration { get; set; }

        public bool UsesCardSwipe { get; set; }

        public bool UsesWebGenPOS { get; set; }

        public bool UsesQBNonInvoiced { get; set; }

        public bool SkipCustomersFromQB { get; set; }

        public bool QBLoadInitialPrice { get; set; }

        public bool UsesConvenienceFee { get; set; }

        public bool SendFailMailOnlyToClient { get; set; }

        public string Ccforallreceipts { get; set; }

        public bool Usesemployeepay { get; set; }

        public decimal? Srpriceperhour { get; set; }

        public decimal? Srpricepershift { get; set; }

        public decimal? ConvenienceFeeAmount { get; set; }

        public bool QBCreateInvoiceOnFail { get; set; }

        public bool CombinedSettlement { get; set; }

        public bool UsesClientCustomerID { get; set; }

        public decimal? ConvenienceFeeMaxCCAmount { get; set; }

        public bool UsesZeeWiseImport { get; set; }

        public string NameOnApplication { get; set; }

        public bool UsesFromExternalCheckout { get; set; }

        public bool ConvenienceFeeIsPercent { get; set; }

        public string QboeOauthAccessToken { get; set; }

        public string QboeOauthAccessTokenSecret { get; set; }

        public bool UsesSlCreatePublicUser { get; set; }

        public string QboeOauthRealmId { get; set; }

        public int? QboeOauthDataSource { get; set; }

        public bool PauseCardVerify { get; set; }

        public bool QBCreateInvoiceOnRecurFail { get; set; }

        public bool InfoFromClientNeeded { get; set; }

        public bool PreInvoiceMonthlyRecur { get; set; }

        public bool UsesSchoolLeader { get; set; }

        public bool UsesSalesForce { get; set; }

        public bool UsesSfCreatePublicUser { get; set; }

        public bool UsesAmexBlue { get; set; }

        public bool UsesAdobeSign { get; set; }

        public bool ProcessSptAsSingleTransaction { get; set; }

        public bool UsesQbLocations { get; set; }

        public bool UsesSchoolLeaderArOnly { get; set; }

        public string QboeOauthVersion { get; set; }

        public System.DateTime? QboeOauthLastConnectTime { get; set; }

        public System.DateTime? QboeOauthLastRefreshTime { get; set; }

        public string QboeOauth2AccessToken { get; set; }

        public System.DateTime? QboeOauth2LastConnectTime { get; set; }

        public bool UsesDocusign { get; set; }

        public int? EncKeyID { get; set; }

        public int? AffiliateID { get; set; }

        public bool UsesProcare { get; set; }

        public decimal? AchConvenienceFeeAmount { get; set; }

        public decimal? LateFeeCc { get; set; }

        public decimal? LateFeeAch { get; set; }

        #endregion

        #region Navigation Properties

        public UserDto PayEzCreator { get; set; }

        public List<PayOnlinePortalDto> Portals { get; set; }

        public List<UserDto> Users_ClientID { get; set; }

        public StateProvinceDto StateProvince { get; set; }

        #endregion
    }

}
