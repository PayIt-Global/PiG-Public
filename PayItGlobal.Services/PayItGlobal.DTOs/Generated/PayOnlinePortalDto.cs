//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace PayItGlobal.DTOs.Generated
{

    public partial class PayOnlinePortalDto
    {
        #region Constructors

        public PayOnlinePortalDto() {
        }

        public PayOnlinePortalDto(int payOnlinePortalID, string title, System.DateTime addedDate, System.DateTime? editDate, System.Guid adminUserID, string headerColor, int? logoWidth, int? logoHeight, string bGTextColor, string refundPolicy, bool? usesNameOfBusiness, bool? usesInvoiceNumber, bool? usesDynamicField, string dynamicFieldTitle, bool dynamicFieldRequired, bool? usesDynamicField2, string dynamicField2Title, bool dynamicField2Required, string uRLSlug, int clientID, int portalTypeID, string homepageInstructions, string paymentPageInstructions, string receiptExtraText, string paymentTypesAllowed, bool usesInvoices, string bannerText, bool useMasterCard, bool useVisa, bool useAmex, bool usesLoyaltyProgram, bool cSCOptional, bool useAnyDaySubscriptions, bool useWeeklySubscriptions, bool useDelayPay, string processor, string aCHProcessor, string backgroundImage, string publicSitePayContainerHeader, bool useDiscover, bool useSplitPay, bool sendARReceiptToCustomer, bool sendARReceiptToClient, bool sendPublicReceiptToClient, bool useNagMail, string receiptTitle, bool useQBNames, bool useClientEmailForReceipt, int? classIDToFilterFor, string receiptEmail, bool usesCustomAmountTabulation, string customAmountText, string eCommTheme, System.DateTime? lastTsysPwdChg, int? aCHPayonlineProcessorID, int? cCPayonlineProcessorID, int? retailPayonlineProcessorID, string failEmail, bool active, bool convFeeExclude, bool invoiceNumberRequired, string adobeSignAbbreviation, int? locationId, bool processACHAsCCD, List<PayOnlineMerchantCredentialDto> payonlineMerchantCredentials, List<PaymentDto> payonlinePayments, ClientDto payonlineClient, PayOnlinePortaltypeDto payonlinePortaltype, UserDto user, PayonlineProcessorDto aCHPayOnlineProcessor, PayonlineProcessorDto cCPayOnlineProcessor, PayonlineProcessorDto retailPayonlineProcessor) {

          this.PayOnlinePortalID = payOnlinePortalID;
          this.Title = title;
          this.AddedDate = addedDate;
          this.EditDate = editDate;
          this.AdminUserID = adminUserID;
          this.HeaderColor = headerColor;
          this.LogoWidth = logoWidth;
          this.LogoHeight = logoHeight;
          this.BGTextColor = bGTextColor;
          this.RefundPolicy = refundPolicy;
          this.UsesNameOfBusiness = usesNameOfBusiness;
          this.UsesInvoiceNumber = usesInvoiceNumber;
          this.UsesDynamicField = usesDynamicField;
          this.DynamicFieldTitle = dynamicFieldTitle;
          this.DynamicFieldRequired = dynamicFieldRequired;
          this.UsesDynamicField2 = usesDynamicField2;
          this.DynamicField2Title = dynamicField2Title;
          this.DynamicField2Required = dynamicField2Required;
          this.URLSlug = uRLSlug;
          this.ClientID = clientID;
          this.PortalTypeID = portalTypeID;
          this.HomepageInstructions = homepageInstructions;
          this.PaymentPageInstructions = paymentPageInstructions;
          this.ReceiptExtraText = receiptExtraText;
          this.PaymentTypesAllowed = paymentTypesAllowed;
          this.UsesInvoices = usesInvoices;
          this.BannerText = bannerText;
          this.UseMasterCard = useMasterCard;
          this.UseVisa = useVisa;
          this.UseAmex = useAmex;
          this.UsesLoyaltyProgram = usesLoyaltyProgram;
          this.CSCOptional = cSCOptional;
          this.UseAnyDaySubscriptions = useAnyDaySubscriptions;
          this.UseWeeklySubscriptions = useWeeklySubscriptions;
          this.UseDelayPay = useDelayPay;
          this.Processor = processor;
          this.ACHProcessor = aCHProcessor;
          this.BackgroundImage = backgroundImage;
          this.PublicSitePayContainerHeader = publicSitePayContainerHeader;
          this.UseDiscover = useDiscover;
          this.UseSplitPay = useSplitPay;
          this.SendARReceiptToCustomer = sendARReceiptToCustomer;
          this.SendARReceiptToClient = sendARReceiptToClient;
          this.SendPublicReceiptToClient = sendPublicReceiptToClient;
          this.UseNagMail = useNagMail;
          this.ReceiptTitle = receiptTitle;
          this.UseQBNames = useQBNames;
          this.UseClientEmailForReceipt = useClientEmailForReceipt;
          this.ClassIDToFilterFor = classIDToFilterFor;
          this.ReceiptEmail = receiptEmail;
          this.UsesCustomAmountTabulation = usesCustomAmountTabulation;
          this.CustomAmountText = customAmountText;
          this.ECommTheme = eCommTheme;
          this.LastTsysPwdChg = lastTsysPwdChg;
          this.ACHPayonlineProcessorID = aCHPayonlineProcessorID;
          this.CCPayonlineProcessorID = cCPayonlineProcessorID;
          this.RetailPayonlineProcessorID = retailPayonlineProcessorID;
          this.FailEmail = failEmail;
          this.Active = active;
          this.ConvFeeExclude = convFeeExclude;
          this.InvoiceNumberRequired = invoiceNumberRequired;
          this.AdobeSignAbbreviation = adobeSignAbbreviation;
          this.LocationId = locationId;
          this.ProcessACHAsCCD = processACHAsCCD;
          this.PayonlineMerchantCredentials = payonlineMerchantCredentials;
          this.PayonlinePayments = payonlinePayments;
          this.PayonlineClient = payonlineClient;
          this.PayonlinePortaltype = payonlinePortaltype;
          this.User = user;
          this.ACHPayOnlineProcessor = aCHPayOnlineProcessor;
          this.CCPayOnlineProcessor = cCPayOnlineProcessor;
          this.RetailPayonlineProcessor = retailPayonlineProcessor;
        }

        #endregion

        #region Properties

        public int PayOnlinePortalID { get; set; }

        public string Title { get; set; }

        public System.DateTime AddedDate { get; set; }

        public System.DateTime? EditDate { get; set; }

        public System.Guid AdminUserID { get; set; }

        public string HeaderColor { get; set; }

        public int? LogoWidth { get; set; }

        public int? LogoHeight { get; set; }

        public string BGTextColor { get; set; }

        public string RefundPolicy { get; set; }

        public bool? UsesNameOfBusiness { get; set; }

        public bool? UsesInvoiceNumber { get; set; }

        public bool? UsesDynamicField { get; set; }

        public string DynamicFieldTitle { get; set; }

        public bool DynamicFieldRequired { get; set; }

        public bool? UsesDynamicField2 { get; set; }

        public string DynamicField2Title { get; set; }

        public bool DynamicField2Required { get; set; }

        public string URLSlug { get; set; }

        public int ClientID { get; set; }

        public int PortalTypeID { get; set; }

        public string HomepageInstructions { get; set; }

        public string PaymentPageInstructions { get; set; }

        public string ReceiptExtraText { get; set; }

        public string PaymentTypesAllowed { get; set; }

        public bool UsesInvoices { get; set; }

        public string BannerText { get; set; }

        public bool UseMasterCard { get; set; }

        public bool UseVisa { get; set; }

        public bool UseAmex { get; set; }

        public bool UsesLoyaltyProgram { get; set; }

        public bool CSCOptional { get; set; }

        public bool UseAnyDaySubscriptions { get; set; }

        public bool UseWeeklySubscriptions { get; set; }

        public bool UseDelayPay { get; set; }

        public string Processor { get; set; }

        public string ACHProcessor { get; set; }

        public string BackgroundImage { get; set; }

        public string PublicSitePayContainerHeader { get; set; }

        public bool UseDiscover { get; set; }

        public bool UseSplitPay { get; set; }

        public bool SendARReceiptToCustomer { get; set; }

        public bool SendARReceiptToClient { get; set; }

        public bool SendPublicReceiptToClient { get; set; }

        public bool UseNagMail { get; set; }

        public string ReceiptTitle { get; set; }

        public bool UseQBNames { get; set; }

        public bool UseClientEmailForReceipt { get; set; }

        public int? ClassIDToFilterFor { get; set; }

        public string ReceiptEmail { get; set; }

        public bool UsesCustomAmountTabulation { get; set; }

        public string CustomAmountText { get; set; }

        public string ECommTheme { get; set; }

        public System.DateTime? LastTsysPwdChg { get; set; }

        public int? ACHPayonlineProcessorID { get; set; }

        public int? CCPayonlineProcessorID { get; set; }

        public int? RetailPayonlineProcessorID { get; set; }

        public string FailEmail { get; set; }

        public bool Active { get; set; }

        public bool ConvFeeExclude { get; set; }

        public bool InvoiceNumberRequired { get; set; }

        public string AdobeSignAbbreviation { get; set; }

        public int? LocationId { get; set; }

        public bool ProcessACHAsCCD { get; set; }

        #endregion

        #region Navigation Properties

        public List<PayOnlineMerchantCredentialDto> PayonlineMerchantCredentials { get; set; }

        public List<PaymentDto> PayonlinePayments { get; set; }

        public ClientDto PayonlineClient { get; set; }

        public PayOnlinePortaltypeDto PayonlinePortaltype { get; set; }

        public UserDto User { get; set; }

        public PayonlineProcessorDto ACHPayOnlineProcessor { get; set; }

        public PayonlineProcessorDto CCPayOnlineProcessor { get; set; }

        public PayonlineProcessorDto RetailPayonlineProcessor { get; set; }

        #endregion
    }

}
