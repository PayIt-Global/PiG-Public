//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace PayItGlobal.DTOs.Generated
{

    public static partial class PaymentConverter
    {

        public static PaymentDto ToDto(this PayItGlobal.Domain.Entities.Payment source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static PaymentDto ToDtoWithRelated(this PayItGlobal.Domain.Entities.Payment source, int level)
        {
            if (source == null)
              return null;

            var target = new PaymentDto();

            // Properties
            target.PaymentID = source.PaymentID;
            target.UserID = source.UserID;
            target.Last4CC = source.Last4CC;
            target.CreatedOn = source.CreatedOn;
            target.ModifiedOn = source.ModifiedOn;
            target.BusinessName = source.BusinessName;
            target.InvoiceNumber = source.InvoiceNumber;
            target.DynamicFieldVal = source.DynamicFieldVal;
            target.DynamicFieldVal2 = source.DynamicFieldVal2;
            target.PortalID = source.PortalID;
            target.PayerFirstName = source.PayerFirstName;
            target.PayerLastName = source.PayerLastName;
            target.ACHName = source.ACHName;
            target.ARProfileID = source.ARProfileID;
            target.SubscriptionID = source.SubscriptionID;
            target.SentToQB = source.SentToQB;
            target.LoyaltyCampaignID = source.LoyaltyCampaignID;
            target.LastQBTransferMessage = source.LastQBTransferMessage;
            target.IsFromMobile = source.IsFromMobile;
            target.SpecialTypeID = source.SpecialTypeID;
            target.Total = source.Total;
            target.SpecialTypeOptionID = source.SpecialTypeOptionID;

            // Navigation Properties
            if (level > 0) {
              target.Portal = source.Portal.ToDtoWithRelated(level - 1);
              target.User = source.User.ToDtoWithRelated(level - 1);
              target.Transactions = source.Transactions.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static PayItGlobal.Domain.Entities.Payment ToEntity(this PaymentDto source)
        {
            if (source == null)
              return null;

            var target = new PayItGlobal.Domain.Entities.Payment();

            // Properties
            target.PaymentID = source.PaymentID;
            target.UserID = source.UserID;
            target.Last4CC = source.Last4CC;
            target.CreatedOn = source.CreatedOn;
            target.ModifiedOn = source.ModifiedOn;
            target.BusinessName = source.BusinessName;
            target.InvoiceNumber = source.InvoiceNumber;
            target.DynamicFieldVal = source.DynamicFieldVal;
            target.DynamicFieldVal2 = source.DynamicFieldVal2;
            target.PortalID = source.PortalID;
            target.PayerFirstName = source.PayerFirstName;
            target.PayerLastName = source.PayerLastName;
            target.ACHName = source.ACHName;
            target.ARProfileID = source.ARProfileID;
            target.SubscriptionID = source.SubscriptionID;
            target.SentToQB = source.SentToQB;
            target.LoyaltyCampaignID = source.LoyaltyCampaignID;
            target.LastQBTransferMessage = source.LastQBTransferMessage;
            target.IsFromMobile = source.IsFromMobile;
            target.SpecialTypeID = source.SpecialTypeID;
            target.Total = source.Total;
            target.SpecialTypeOptionID = source.SpecialTypeOptionID;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<PaymentDto> ToDtos(this IEnumerable<PayItGlobal.Domain.Entities.Payment> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<PaymentDto> ToDtosWithRelated(this IEnumerable<PayItGlobal.Domain.Entities.Payment> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<PayItGlobal.Domain.Entities.Payment> ToEntities(this IEnumerable<PaymentDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(PayItGlobal.Domain.Entities.Payment source, PaymentDto target);

        static partial void OnEntityCreating(PaymentDto source, PayItGlobal.Domain.Entities.Payment target);

    }

}
