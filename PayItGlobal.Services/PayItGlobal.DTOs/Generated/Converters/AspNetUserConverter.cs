//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace PayItGlobal.DTOs.Generated
{

    public static partial class AspNetUserConverter
    {

        public static AspNetUserDto ToDto(this PayItGlobal.Domain.Entities.AspNetUser source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AspNetUserDto ToDtoWithRelated(this PayItGlobal.Domain.Entities.AspNetUser source, int level)
        {
            if (source == null)
              return null;

            var target = new AspNetUserDto();

            // Properties
            target.Id = source.Id;
            target.UserName = source.UserName;
            target.NormalizedUserName = source.NormalizedUserName;
            target.Email = source.Email;
            target.NormalizedEmail = source.NormalizedEmail;
            target.EmailConfirmed = source.EmailConfirmed;
            target.PasswordHash = source.PasswordHash;
            target.SecurityStamp = source.SecurityStamp;
            target.ConcurrencyStamp = source.ConcurrencyStamp;
            target.PhoneNumber = source.PhoneNumber;
            target.PhoneNumberConfirmed = source.PhoneNumberConfirmed;
            target.TwoFactorEnabled = source.TwoFactorEnabled;
            target.LockoutEnd = source.LockoutEnd;
            target.LockoutEnabled = source.LockoutEnabled;
            target.AccessFailedCount = source.AccessFailedCount;
            target.FullName = source.FullName;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUserClaims = source.AspNetUserClaims.ToDtosWithRelated(level - 1);
              target.AspNetUserLogins = source.AspNetUserLogins.ToDtosWithRelated(level - 1);
              target.AspNetUserTokens = source.AspNetUserTokens.ToDtosWithRelated(level - 1);
              target.RefreshTokens = source.RefreshTokens.ToDtosWithRelated(level - 1);
              target.AspNetRoles = source.AspNetRoles.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static PayItGlobal.Domain.Entities.AspNetUser ToEntity(this AspNetUserDto source)
        {
            if (source == null)
              return null;

            var target = new PayItGlobal.Domain.Entities.AspNetUser();

            // Properties
            target.Id = source.Id;
            target.UserName = source.UserName;
            target.NormalizedUserName = source.NormalizedUserName;
            target.Email = source.Email;
            target.NormalizedEmail = source.NormalizedEmail;
            target.EmailConfirmed = source.EmailConfirmed;
            target.PasswordHash = source.PasswordHash;
            target.SecurityStamp = source.SecurityStamp;
            target.ConcurrencyStamp = source.ConcurrencyStamp;
            target.PhoneNumber = source.PhoneNumber;
            target.PhoneNumberConfirmed = source.PhoneNumberConfirmed;
            target.TwoFactorEnabled = source.TwoFactorEnabled;
            target.LockoutEnd = source.LockoutEnd;
            target.LockoutEnabled = source.LockoutEnabled;
            target.AccessFailedCount = source.AccessFailedCount;
            target.FullName = source.FullName;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AspNetUserDto> ToDtos(this IEnumerable<PayItGlobal.Domain.Entities.AspNetUser> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AspNetUserDto> ToDtosWithRelated(this IEnumerable<PayItGlobal.Domain.Entities.AspNetUser> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<PayItGlobal.Domain.Entities.AspNetUser> ToEntities(this IEnumerable<AspNetUserDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(PayItGlobal.Domain.Entities.AspNetUser source, AspNetUserDto target);

        static partial void OnEntityCreating(AspNetUserDto source, PayItGlobal.Domain.Entities.AspNetUser target);

    }

}
