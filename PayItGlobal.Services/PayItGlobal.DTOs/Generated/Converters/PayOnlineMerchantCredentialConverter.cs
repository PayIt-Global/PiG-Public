//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace PayItGlobal.DTOs.Generated
{

    public static partial class PayOnlineMerchantCredentialConverter
    {

        public static PayOnlineMerchantCredentialDto ToDto(this PayItGlobal.Domain.Entities.PayOnlineMerchantCredential source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static PayOnlineMerchantCredentialDto ToDtoWithRelated(this PayItGlobal.Domain.Entities.PayOnlineMerchantCredential source, int level)
        {
            if (source == null)
              return null;

            var target = new PayOnlineMerchantCredentialDto();

            // Properties
            target.CredentialID = source.CredentialID;
            target.PortalID = source.PortalID;
            target.PayonlineProcessorID = source.PayonlineProcessorID;
            target.CreateDate = source.CreateDate;
            target.CreatedBy = source.CreatedBy;
            target.EditDate = source.EditDate;
            target.EditedBy = source.EditedBy;
            target.LastPwdChg = source.LastPwdChg;
            target.ProcessorID = source.ProcessorID;
            target.UserName = source.UserName;
            target.Password = source.Password;
            target.MerchantID = source.MerchantID;
            target.Key = source.Key;
            target.WPOCredentialID = source.WPOCredentialID;
            target.MobileWorkerID = source.MobileWorkerID;
            target.ProcessTypeID = source.ProcessTypeID;
            target.EncKeyID = source.EncKeyID;

            // Navigation Properties
            if (level > 0) {
              target.PayonlinePortal = source.PayonlinePortal.ToDtoWithRelated(level - 1);
              target.CC_Credentail = source.CC_Credentail.ToDtoWithRelated(level - 1);
              target.ACH_Credential = source.ACH_Credential.ToDtoWithRelated(level - 1);
              target.PayonlineProcessType = source.PayonlineProcessType.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static PayItGlobal.Domain.Entities.PayOnlineMerchantCredential ToEntity(this PayOnlineMerchantCredentialDto source)
        {
            if (source == null)
              return null;

            var target = new PayItGlobal.Domain.Entities.PayOnlineMerchantCredential();

            // Properties
            target.CredentialID = source.CredentialID;
            target.PortalID = source.PortalID;
            target.PayonlineProcessorID = source.PayonlineProcessorID;
            target.CreateDate = source.CreateDate;
            target.CreatedBy = source.CreatedBy;
            target.EditDate = source.EditDate;
            target.EditedBy = source.EditedBy;
            target.LastPwdChg = source.LastPwdChg;
            target.ProcessorID = source.ProcessorID;
            target.UserName = source.UserName;
            target.Password = source.Password;
            target.MerchantID = source.MerchantID;
            target.Key = source.Key;
            target.WPOCredentialID = source.WPOCredentialID;
            target.MobileWorkerID = source.MobileWorkerID;
            target.ProcessTypeID = source.ProcessTypeID;
            target.EncKeyID = source.EncKeyID;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<PayOnlineMerchantCredentialDto> ToDtos(this IEnumerable<PayItGlobal.Domain.Entities.PayOnlineMerchantCredential> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<PayOnlineMerchantCredentialDto> ToDtosWithRelated(this IEnumerable<PayItGlobal.Domain.Entities.PayOnlineMerchantCredential> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<PayItGlobal.Domain.Entities.PayOnlineMerchantCredential> ToEntities(this IEnumerable<PayOnlineMerchantCredentialDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(PayItGlobal.Domain.Entities.PayOnlineMerchantCredential source, PayOnlineMerchantCredentialDto target);

        static partial void OnEntityCreating(PayOnlineMerchantCredentialDto source, PayItGlobal.Domain.Entities.PayOnlineMerchantCredential target);

    }

}
