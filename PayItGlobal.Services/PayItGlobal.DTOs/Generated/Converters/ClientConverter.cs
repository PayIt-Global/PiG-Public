//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace PayItGlobal.DTOs.Generated
{

    public static partial class ClientConverter
    {

        public static ClientDto ToDto(this PayItGlobal.Domain.Entities.Client source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ClientDto ToDtoWithRelated(this PayItGlobal.Domain.Entities.Client source, int level)
        {
            if (source == null)
              return null;

            var target = new ClientDto();

            // Properties
            target.ClientID = source.ClientID;
            target.FranchiseID = source.FranchiseID;
            target.Name = source.Name;
            target.AddedByID = source.AddedByID;
            target.AddedDate = source.AddedDate;
            target.AddressLine1 = source.AddressLine1;
            target.AddressLine2 = source.AddressLine2;
            target.City = source.City;
            target.StateProvinceID = source.StateProvinceID;
            target.Phone = source.Phone;
            target.Fax = source.Fax;
            target.PostalCode = source.PostalCode;
            target.ModifiedDate = source.ModifiedDate;
            target.Email = source.Email;
            target.ContactFname = source.ContactFname;
            target.MvcCmsPortalID = source.MvcCmsPortalID;
            target.ContactLname = source.ContactLname;
            target.SetupIsComplete = source.SetupIsComplete;
            target.Active = source.Active;
            target.UsesSalesReceipts = source.UsesSalesReceipts;
            target.UsesQB = source.UsesQB;
            target.UsesQBOE = source.UsesQBOE;
            target.ConnectionTicket = source.ConnectionTicket;
            target.UsesUnitQuantity = source.UsesUnitQuantity;
            target.UsesQBOEOld = source.UsesQBOEOld;
            target.InvoicesToRemember = source.InvoicesToRemember;
            target.QBInvoiceEachJob = source.QBInvoiceEachJob;
            target.QBNameLastFirst = source.QBNameLastFirst;
            target.QBSkippBillingAddrLine1 = source.QBSkippBillingAddrLine1;
            target.QBDefaultOnDemand = source.QBDefaultOnDemand;
            target.QBDefaultInvoiceStyleOnly = source.QBDefaultInvoiceStyleOnly;
            target.InitialSyncIsDone = source.InitialSyncIsDone;
            target.QBUsesClasses = source.QBUsesClasses;
            target.UsesOnlineRegistration = source.UsesOnlineRegistration;
            target.UsesCardSwipe = source.UsesCardSwipe;
            target.UsesWebGenPOS = source.UsesWebGenPOS;
            target.UsesQBNonInvoiced = source.UsesQBNonInvoiced;
            target.SkipCustomersFromQB = source.SkipCustomersFromQB;
            target.QBLoadInitialPrice = source.QBLoadInitialPrice;
            target.UsesConvenienceFee = source.UsesConvenienceFee;
            target.SendFailMailOnlyToClient = source.SendFailMailOnlyToClient;
            target.Ccforallreceipts = source.Ccforallreceipts;
            target.Usesemployeepay = source.Usesemployeepay;
            target.Srpriceperhour = source.Srpriceperhour;
            target.Srpricepershift = source.Srpricepershift;
            target.ConvenienceFeeAmount = source.ConvenienceFeeAmount;
            target.QBCreateInvoiceOnFail = source.QBCreateInvoiceOnFail;
            target.CombinedSettlement = source.CombinedSettlement;
            target.UsesClientCustomerID = source.UsesClientCustomerID;
            target.ConvenienceFeeMaxCCAmount = source.ConvenienceFeeMaxCCAmount;
            target.UsesZeeWiseImport = source.UsesZeeWiseImport;
            target.NameOnApplication = source.NameOnApplication;
            target.UsesFromExternalCheckout = source.UsesFromExternalCheckout;
            target.ConvenienceFeeIsPercent = source.ConvenienceFeeIsPercent;
            target.QboeOauthAccessToken = source.QboeOauthAccessToken;
            target.QboeOauthAccessTokenSecret = source.QboeOauthAccessTokenSecret;
            target.UsesSlCreatePublicUser = source.UsesSlCreatePublicUser;
            target.QboeOauthRealmId = source.QboeOauthRealmId;
            target.QboeOauthDataSource = source.QboeOauthDataSource;
            target.PauseCardVerify = source.PauseCardVerify;
            target.QBCreateInvoiceOnRecurFail = source.QBCreateInvoiceOnRecurFail;
            target.InfoFromClientNeeded = source.InfoFromClientNeeded;
            target.PreInvoiceMonthlyRecur = source.PreInvoiceMonthlyRecur;
            target.UsesSchoolLeader = source.UsesSchoolLeader;
            target.UsesSalesForce = source.UsesSalesForce;
            target.UsesSfCreatePublicUser = source.UsesSfCreatePublicUser;
            target.UsesAmexBlue = source.UsesAmexBlue;
            target.UsesAdobeSign = source.UsesAdobeSign;
            target.ProcessSptAsSingleTransaction = source.ProcessSptAsSingleTransaction;
            target.UsesQbLocations = source.UsesQbLocations;
            target.UsesSchoolLeaderArOnly = source.UsesSchoolLeaderArOnly;
            target.QboeOauthVersion = source.QboeOauthVersion;
            target.QboeOauthLastConnectTime = source.QboeOauthLastConnectTime;
            target.QboeOauthLastRefreshTime = source.QboeOauthLastRefreshTime;
            target.QboeOauth2AccessToken = source.QboeOauth2AccessToken;
            target.QboeOauth2LastConnectTime = source.QboeOauth2LastConnectTime;
            target.UsesDocusign = source.UsesDocusign;
            target.EncKeyID = source.EncKeyID;
            target.AffiliateID = source.AffiliateID;
            target.UsesProcare = source.UsesProcare;
            target.AchConvenienceFeeAmount = source.AchConvenienceFeeAmount;
            target.LateFeeCc = source.LateFeeCc;
            target.LateFeeAch = source.LateFeeAch;

            // Navigation Properties
            if (level > 0) {
              target.PayEzCreator = source.PayEzCreator.ToDtoWithRelated(level - 1);
              target.Portals = source.Portals.ToDtosWithRelated(level - 1);
              target.Users_ClientID = source.Users_ClientID.ToDtosWithRelated(level - 1);
              target.StateProvince = source.StateProvince.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static PayItGlobal.Domain.Entities.Client ToEntity(this ClientDto source)
        {
            if (source == null)
              return null;

            var target = new PayItGlobal.Domain.Entities.Client();

            // Properties
            target.ClientID = source.ClientID;
            target.FranchiseID = source.FranchiseID;
            target.Name = source.Name;
            target.AddedByID = source.AddedByID;
            target.AddedDate = source.AddedDate;
            target.AddressLine1 = source.AddressLine1;
            target.AddressLine2 = source.AddressLine2;
            target.City = source.City;
            target.StateProvinceID = source.StateProvinceID;
            target.Phone = source.Phone;
            target.Fax = source.Fax;
            target.PostalCode = source.PostalCode;
            target.ModifiedDate = source.ModifiedDate;
            target.Email = source.Email;
            target.ContactFname = source.ContactFname;
            target.MvcCmsPortalID = source.MvcCmsPortalID;
            target.ContactLname = source.ContactLname;
            target.SetupIsComplete = source.SetupIsComplete;
            target.Active = source.Active;
            target.UsesSalesReceipts = source.UsesSalesReceipts;
            target.UsesQB = source.UsesQB;
            target.UsesQBOE = source.UsesQBOE;
            target.ConnectionTicket = source.ConnectionTicket;
            target.UsesUnitQuantity = source.UsesUnitQuantity;
            target.UsesQBOEOld = source.UsesQBOEOld;
            target.InvoicesToRemember = source.InvoicesToRemember;
            target.QBInvoiceEachJob = source.QBInvoiceEachJob;
            target.QBNameLastFirst = source.QBNameLastFirst;
            target.QBSkippBillingAddrLine1 = source.QBSkippBillingAddrLine1;
            target.QBDefaultOnDemand = source.QBDefaultOnDemand;
            target.QBDefaultInvoiceStyleOnly = source.QBDefaultInvoiceStyleOnly;
            target.InitialSyncIsDone = source.InitialSyncIsDone;
            target.QBUsesClasses = source.QBUsesClasses;
            target.UsesOnlineRegistration = source.UsesOnlineRegistration;
            target.UsesCardSwipe = source.UsesCardSwipe;
            target.UsesWebGenPOS = source.UsesWebGenPOS;
            target.UsesQBNonInvoiced = source.UsesQBNonInvoiced;
            target.SkipCustomersFromQB = source.SkipCustomersFromQB;
            target.QBLoadInitialPrice = source.QBLoadInitialPrice;
            target.UsesConvenienceFee = source.UsesConvenienceFee;
            target.SendFailMailOnlyToClient = source.SendFailMailOnlyToClient;
            target.Ccforallreceipts = source.Ccforallreceipts;
            target.Usesemployeepay = source.Usesemployeepay;
            target.Srpriceperhour = source.Srpriceperhour;
            target.Srpricepershift = source.Srpricepershift;
            target.ConvenienceFeeAmount = source.ConvenienceFeeAmount;
            target.QBCreateInvoiceOnFail = source.QBCreateInvoiceOnFail;
            target.CombinedSettlement = source.CombinedSettlement;
            target.UsesClientCustomerID = source.UsesClientCustomerID;
            target.ConvenienceFeeMaxCCAmount = source.ConvenienceFeeMaxCCAmount;
            target.UsesZeeWiseImport = source.UsesZeeWiseImport;
            target.NameOnApplication = source.NameOnApplication;
            target.UsesFromExternalCheckout = source.UsesFromExternalCheckout;
            target.ConvenienceFeeIsPercent = source.ConvenienceFeeIsPercent;
            target.QboeOauthAccessToken = source.QboeOauthAccessToken;
            target.QboeOauthAccessTokenSecret = source.QboeOauthAccessTokenSecret;
            target.UsesSlCreatePublicUser = source.UsesSlCreatePublicUser;
            target.QboeOauthRealmId = source.QboeOauthRealmId;
            target.QboeOauthDataSource = source.QboeOauthDataSource;
            target.PauseCardVerify = source.PauseCardVerify;
            target.QBCreateInvoiceOnRecurFail = source.QBCreateInvoiceOnRecurFail;
            target.InfoFromClientNeeded = source.InfoFromClientNeeded;
            target.PreInvoiceMonthlyRecur = source.PreInvoiceMonthlyRecur;
            target.UsesSchoolLeader = source.UsesSchoolLeader;
            target.UsesSalesForce = source.UsesSalesForce;
            target.UsesSfCreatePublicUser = source.UsesSfCreatePublicUser;
            target.UsesAmexBlue = source.UsesAmexBlue;
            target.UsesAdobeSign = source.UsesAdobeSign;
            target.ProcessSptAsSingleTransaction = source.ProcessSptAsSingleTransaction;
            target.UsesQbLocations = source.UsesQbLocations;
            target.UsesSchoolLeaderArOnly = source.UsesSchoolLeaderArOnly;
            target.QboeOauthVersion = source.QboeOauthVersion;
            target.QboeOauthLastConnectTime = source.QboeOauthLastConnectTime;
            target.QboeOauthLastRefreshTime = source.QboeOauthLastRefreshTime;
            target.QboeOauth2AccessToken = source.QboeOauth2AccessToken;
            target.QboeOauth2LastConnectTime = source.QboeOauth2LastConnectTime;
            target.UsesDocusign = source.UsesDocusign;
            target.EncKeyID = source.EncKeyID;
            target.AffiliateID = source.AffiliateID;
            target.UsesProcare = source.UsesProcare;
            target.AchConvenienceFeeAmount = source.AchConvenienceFeeAmount;
            target.LateFeeCc = source.LateFeeCc;
            target.LateFeeAch = source.LateFeeAch;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ClientDto> ToDtos(this IEnumerable<PayItGlobal.Domain.Entities.Client> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ClientDto> ToDtosWithRelated(this IEnumerable<PayItGlobal.Domain.Entities.Client> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<PayItGlobal.Domain.Entities.Client> ToEntities(this IEnumerable<ClientDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(PayItGlobal.Domain.Entities.Client source, ClientDto target);

        static partial void OnEntityCreating(ClientDto source, PayItGlobal.Domain.Entities.Client target);

    }

}
