//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 7/7/2024 2:04:14 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using PayItGlobal.Domain.Entities;

namespace PayItGlobal.Infrastructure.Context
{

    public partial class PayItGlobalDb : DbContext
    {

        public PayItGlobalDb() :
            base()
        {
            OnCreated();
        }

        public PayItGlobalDb(DbContextOptions<PayItGlobalDb> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UsePostgreSql(@"User Id=postgres;Password=password;Host=192.168.0.16;Database=pay_it_global;Persist Security Info=True;Initial Schema=core_identity");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<AspNetUser> AspNetUsers
        {
            get;
            set;
        }

        public virtual DbSet<AspNetRole> AspNetRoles
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUserClaim> AspNetUserClaims
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUserLogin> AspNetUserLogins
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUserToken> AspNetUserTokens
        {
            get;
            set;
        }

        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims
        {
            get;
            set;
        }

        public virtual DbSet<RefreshToken> RefreshTokens
        {
            get;
            set;
        }

        public virtual DbSet<StateProvince> StateProvinces
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AspNetUserMapping(modelBuilder);
            this.CustomizeAspNetUserMapping(modelBuilder);

            this.AspNetRoleMapping(modelBuilder);
            this.CustomizeAspNetRoleMapping(modelBuilder);

            this.AspNetUserClaimMapping(modelBuilder);
            this.CustomizeAspNetUserClaimMapping(modelBuilder);

            this.AspNetUserLoginMapping(modelBuilder);
            this.CustomizeAspNetUserLoginMapping(modelBuilder);

            this.AspNetUserTokenMapping(modelBuilder);
            this.CustomizeAspNetUserTokenMapping(modelBuilder);

            this.AspNetRoleClaimMapping(modelBuilder);
            this.CustomizeAspNetRoleClaimMapping(modelBuilder);

            this.RefreshTokenMapping(modelBuilder);
            this.CustomizeRefreshTokenMapping(modelBuilder);

            this.StateProvinceMapping(modelBuilder);
            this.CustomizeStateProvinceMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region AspNetUser Mapping

        private void AspNetUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUser>().ToTable(@"asp_net_users", @"core_identity");
            modelBuilder.Entity<AspNetUser>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AspNetUser>().Property(x => x.UserName).HasColumnName(@"user_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.NormalizedUserName).HasColumnName(@"normalized_user_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.NormalizedEmail).HasColumnName(@"normalized_email").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.EmailConfirmed).HasColumnName(@"email_confirmed").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PasswordHash).HasColumnName(@"password_hash").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.SecurityStamp).HasColumnName(@"security_stamp").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.ConcurrencyStamp).HasColumnName(@"concurrency_stamp").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PhoneNumber).HasColumnName(@"phone_number").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PhoneNumberConfirmed).HasColumnName(@"phone_number_confirmed").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.TwoFactorEnabled).HasColumnName(@"two_factor_enabled").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.LockoutEnd).HasColumnName(@"lockout_end").HasColumnType(@"timestamptz").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.LockoutEnabled).HasColumnName(@"lockout_enabled").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.AccessFailedCount).HasColumnName(@"access_failed_count").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().HasKey(@"Id");
        }

        partial void CustomizeAspNetUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetRole Mapping

        private void AspNetRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRole>().ToTable(@"asp_net_roles", @"core_identity");
            modelBuilder.Entity<AspNetRole>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AspNetRole>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().Property(x => x.NormalizedName).HasColumnName(@"normalized_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().Property(x => x.ConcurrencyStamp).HasColumnName(@"concurrency_stamp").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().HasKey(@"Id");
            modelBuilder.Entity<AspNetRole>().HasIndex(@"ConcurrencyStamp").IsUnique(true);
        }

        partial void CustomizeAspNetRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUserClaim Mapping

        private void AspNetUserClaimMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserClaim>().ToTable(@"asp_net_user_claims", @"core_identity");
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.ClaimType).HasColumnName(@"claim_type").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.ClaimValue).HasColumnName(@"claim_value").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserClaim>().HasKey(@"Id");
        }

        partial void CustomizeAspNetUserClaimMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUserLogin Mapping

        private void AspNetUserLoginMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserLogin>().ToTable(@"asp_net_user_logins", @"core_identity");
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.LoginProvider).HasColumnName(@"login_provider").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.ProviderKey).HasColumnName(@"provider_key").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.ProviderDisplayName).HasColumnName(@"provider_display_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().HasKey(@"LoginProvider", @"ProviderKey");
        }

        partial void CustomizeAspNetUserLoginMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUserToken Mapping

        private void AspNetUserTokenMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserToken>().ToTable(@"asp_net_user_tokens", @"core_identity");
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.LoginProvider).HasColumnName(@"login_provider").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().HasKey(@"UserId", @"LoginProvider", @"Name");
        }

        partial void CustomizeAspNetUserTokenMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetRoleClaim Mapping

        private void AspNetRoleClaimMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRoleClaim>().ToTable(@"asp_net_role_claims", @"core_identity");
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.RoleId).HasColumnName(@"role_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.ClaimType).HasColumnName(@"claim_type").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.ClaimValue).HasColumnName(@"claim_value").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRoleClaim>().HasKey(@"Id");
        }

        partial void CustomizeAspNetRoleClaimMapping(ModelBuilder modelBuilder);

        #endregion

        #region RefreshToken Mapping

        private void RefreshTokenMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RefreshToken>().ToTable(@"refresh_tokens", @"core_identity");
            modelBuilder.Entity<RefreshToken>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<RefreshToken>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Expires).HasColumnName(@"expires").HasColumnType(@"timestamptz").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Created).HasColumnName(@"created").HasColumnType(@"timestamptz").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"now()");
            modelBuilder.Entity<RefreshToken>().Property(x => x.CreatedByIp).HasColumnName(@"created_by_ip").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Revoked).HasColumnName(@"revoked").HasColumnType(@"timestamptz").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.RevokedByIp).HasColumnName(@"revoked_by_ip").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.ReplacedByToken).HasColumnName(@"replaced_by_token").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.ReasonRevoked).HasColumnName(@"reason_revoked").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().HasKey(@"Id");
        }

        partial void CustomizeRefreshTokenMapping(ModelBuilder modelBuilder);

        #endregion

        #region StateProvince Mapping

        private void StateProvinceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StateProvince>().ToTable(@"state_provinces", @"public");
            modelBuilder.Entity<StateProvince>().Property(x => x.StateprovinceId).HasColumnName(@"stateprovinceid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.StateProvinceCode).HasColumnName(@"stateprovincecode").HasColumnType(@"char").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<StateProvince>().Property(x => x.CountryRegioncode).HasColumnName(@"countryregioncode").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<StateProvince>().Property(x => x.IsOnlyStateProvinceFlag).HasColumnName(@"isonlystateprovinceflag").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<StateProvince>().Property(x => x.TerritoryId).HasColumnName(@"territoryid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.RowGuid).HasColumnName(@"rowguid").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.ModifiedDate).HasColumnName(@"modifieddate").HasColumnType(@"timestamp").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().HasKey(@"StateprovinceId");
        }

        partial void CustomizeStateProvinceMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetRoles).WithMany(op => op.AspNetUsers)
                .UsingEntity<Dictionary<string, object>>(
                    @"asp_net_user_roles",
                    x => x.HasOne<AspNetRole>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"role_id"),
                    x => x.HasOne<AspNetUser>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"user_id")
                )
                .ToTable(@"asp_net_user_roles", @"core_identity");
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetUserClaims).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetUserLogins).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetUserTokens).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<AspNetRole>().HasMany(x => x.AspNetRoleClaims).WithOne(op => op.AspNetRole).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(false);

            modelBuilder.Entity<AspNetUserClaim>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserClaims).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);

            modelBuilder.Entity<AspNetUserLogin>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserLogins).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);

            modelBuilder.Entity<AspNetUserToken>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserTokens).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<AspNetRoleClaim>().HasOne(x => x.AspNetRole).WithMany(op => op.AspNetRoleClaims).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(false);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
