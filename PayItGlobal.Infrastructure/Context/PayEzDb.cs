//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 7/1/2024 2:59:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using PayItGlobal.Domain.Entities;

namespace PayItGlobal.Infrastructure.Context
{

    public partial class PayEzDb : DbContext
    {

        public PayEzDb() :
            base()
        {
            OnCreated();
        }

        public PayEzDb(DbContextOptions<PayEzDb> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UsePostgreSql(GetConnectionString("PayEzConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Client> Clients
        {
            get;
            set;
        }

        public virtual DbSet<PayOnlineMerchantCredential> PayOnlineMerchantCredentials
        {
            get;
            set;
        }

        public virtual DbSet<Payment> Payments
        {
            get;
            set;
        }

        public virtual DbSet<PayOnlinePortal> PayOnlinePortals
        {
            get;
            set;
        }

        public virtual DbSet<PayOnlinePortaltype> PayOnlinePortaltypes
        {
            get;
            set;
        }

        public virtual DbSet<Transaction> Transactions
        {
            get;
            set;
        }

        public virtual DbSet<Role> Roles
        {
            get;
            set;
        }

        public virtual DbSet<StateProvince> StateProvinces
        {
            get;
            set;
        }

        public virtual DbSet<PayonlineProcessor> PayonlineProcessors
        {
            get;
            set;
        }

        public virtual DbSet<PayonlineProcessType> PayonlineProcessTypes
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUser> AspNetUsers
        {
            get;
            set;
        }

        public virtual DbSet<AspNetRole> AspNetRoles
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUserClaim> AspNetUserClaims
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUserLogin> AspNetUserLogins
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUserToken> AspNetUserTokens
        {
            get;
            set;
        }

        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims
        {
            get;
            set;
        }

        public virtual DbSet<RefreshToken> RefreshTokens
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.ClientMapping(modelBuilder);
            this.CustomizeClientMapping(modelBuilder);

            this.PayOnlineMerchantCredentialMapping(modelBuilder);
            this.CustomizePayOnlineMerchantCredentialMapping(modelBuilder);

            this.PaymentMapping(modelBuilder);
            this.CustomizePaymentMapping(modelBuilder);

            this.PayOnlinePortalMapping(modelBuilder);
            this.CustomizePayOnlinePortalMapping(modelBuilder);

            this.PayOnlinePortaltypeMapping(modelBuilder);
            this.CustomizePayOnlinePortaltypeMapping(modelBuilder);

            this.TransactionMapping(modelBuilder);
            this.CustomizeTransactionMapping(modelBuilder);

            this.RoleMapping(modelBuilder);
            this.CustomizeRoleMapping(modelBuilder);

            this.StateProvinceMapping(modelBuilder);
            this.CustomizeStateProvinceMapping(modelBuilder);

            this.PayonlineProcessorMapping(modelBuilder);
            this.CustomizePayonlineProcessorMapping(modelBuilder);

            this.PayonlineProcessTypeMapping(modelBuilder);
            this.CustomizePayonlineProcessTypeMapping(modelBuilder);

            this.AspNetUserMapping(modelBuilder);
            this.CustomizeAspNetUserMapping(modelBuilder);

            this.AspNetRoleMapping(modelBuilder);
            this.CustomizeAspNetRoleMapping(modelBuilder);

            this.AspNetUserClaimMapping(modelBuilder);
            this.CustomizeAspNetUserClaimMapping(modelBuilder);

            this.AspNetUserLoginMapping(modelBuilder);
            this.CustomizeAspNetUserLoginMapping(modelBuilder);

            this.AspNetUserTokenMapping(modelBuilder);
            this.CustomizeAspNetUserTokenMapping(modelBuilder);

            this.AspNetRoleClaimMapping(modelBuilder);
            this.CustomizeAspNetRoleClaimMapping(modelBuilder);

            this.RefreshTokenMapping(modelBuilder);
            this.CustomizeRefreshTokenMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"users", @"public");
            modelBuilder.Entity<User>().Property(x => x.UserID).HasColumnName(@"userid").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.CreationDate).HasColumnName(@"creationdate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.UserName).HasColumnName(@"username").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.ApplicationName).HasColumnName(@"applicationname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.PasswordQuestion).HasColumnName(@"passwordquestion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.PasswordAnswer).HasColumnName(@"passwordanswer").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.IsApproved).HasColumnName(@"isapproved").HasColumnType(@"bool").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"true");
            modelBuilder.Entity<User>().Property(x => x.LastActivityDate).HasColumnName(@"lastactivitydate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.LastLoginDate).HasColumnName(@"lastlogindate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.LastPasswordChangedDate).HasColumnName(@"lastpasswordchangeddate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.IsOnline).HasColumnName(@"isonline").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.IsLockedOut).HasColumnName(@"islockedout").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.LastLockedOutDate).HasColumnName(@"lastlockedoutdate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.FailedPasswordAttemptCount).HasColumnName(@"failedpasswordattemptcount").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.FailedPasswordAttemptWindowStart).HasColumnName(@"failedpasswordattemptwindowstart").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.FailedPasswordAnswerAttemptCount).HasColumnName(@"failedpasswordanswerattemptcount").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.FailedPasswordAnswerAttemptWindowStart).HasColumnName(@"failedpasswordanswerattemptwindowstart").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.LastModified).HasColumnName(@"lastmodified").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Comment).HasColumnName(@"comment").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.PortalID).HasColumnName(@"portalid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.OpenId).HasColumnName(@"openid").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<User>().Property(x => x.FireFileKey).HasColumnName(@"firefilekey").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<User>().Property(x => x.ClientID).HasColumnName(@"clientid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.ClientCustomerID).HasColumnName(@"clientcustomerid").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<User>().Property(x => x.SecurityStamp).HasColumnName(@"security_stamp").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<User>().Property(x => x.EmailConfirmed).HasColumnName(@"email_confirmed").HasColumnType(@"bool").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<User>().Property(x => x.EncKeyId).HasColumnName(@"enc_key_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.UsesBeta).HasColumnName(@"uses_beta").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.AspNetUserId).HasColumnName(@"asp_net_user_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<User>().HasKey(@"UserID");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Client Mapping

        private void ClientMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Client>().ToTable(@"payonline_clients", @"public");
            modelBuilder.Entity<Client>().Property(x => x.ClientID).HasColumnName(@"clientid").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_clients_clientid_seq'::regclass)");
            modelBuilder.Entity<Client>().Property(x => x.FranchiseID).HasColumnName(@"franchiseid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<Client>().Property(x => x.AddedByID).HasColumnName(@"addedbyid").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.AddedDate).HasColumnName(@"addeddate").HasColumnType(@"timestamp").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.AddressLine1).HasColumnName(@"addressline1").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(60);
            modelBuilder.Entity<Client>().Property(x => x.AddressLine2).HasColumnName(@"addressline2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(60);
            modelBuilder.Entity<Client>().Property(x => x.City).HasColumnName(@"city").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Client>().Property(x => x.StateProvinceID).HasColumnName(@"stateprovinceid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.Phone).HasColumnName(@"phone").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25);
            modelBuilder.Entity<Client>().Property(x => x.Fax).HasColumnName(@"fax").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(25);
            modelBuilder.Entity<Client>().Property(x => x.PostalCode).HasColumnName(@"postalcode").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(15);
            modelBuilder.Entity<Client>().Property(x => x.ModifiedDate).HasColumnName(@"modifieddate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Client>().Property(x => x.ContactFname).HasColumnName(@"contactfname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Client>().Property(x => x.MvcCmsPortalID).HasColumnName(@"mvccmsportalid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.ContactLname).HasColumnName(@"contactlname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Client>().Property(x => x.SetupIsComplete).HasColumnName(@"setupiscomplete").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.Active).HasColumnName(@"active").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesSalesReceipts).HasColumnName(@"usessalesreceipts").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesQB).HasColumnName(@"usesqb").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesQBOE).HasColumnName(@"usesqboe").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.ConnectionTicket).HasColumnName(@"connectionticket").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Client>().Property(x => x.UsesUnitQuantity).HasColumnName(@"usesunitquantity").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesQBOEOld).HasColumnName(@"usesqboeold").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.InvoicesToRemember).HasColumnName(@"invoicestoremember").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBInvoiceEachJob).HasColumnName(@"qbinvoiceeachjob").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBNameLastFirst).HasColumnName(@"qbnamelastfirst").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBSkippBillingAddrLine1).HasColumnName(@"qbskippbillingaddrline1").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBDefaultOnDemand).HasColumnName(@"qbdefaultondemand").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBDefaultInvoiceStyleOnly).HasColumnName(@"qbdefaultinvoicestyleonly").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.InitialSyncIsDone).HasColumnName(@"initialsyncisdone").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBUsesClasses).HasColumnName(@"qbusesclasses").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesOnlineRegistration).HasColumnName(@"usesonlineregistration").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesCardSwipe).HasColumnName(@"usescardswipe").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesWebGenPOS).HasColumnName(@"useswebgenpos").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesQBNonInvoiced).HasColumnName(@"usesqbnoninvoiced").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.SkipCustomersFromQB).HasColumnName(@"skipcustomersfromqb").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBLoadInitialPrice).HasColumnName(@"qbloadinitialprice").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesConvenienceFee).HasColumnName(@"usesconveniencefee").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.SendFailMailOnlyToClient).HasColumnName(@"sendfailmailonlytoclient").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.Ccforallreceipts).HasColumnName(@"ccforallreceipts").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Client>().Property(x => x.Usesemployeepay).HasColumnName(@"usesemployeepay").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.Srpriceperhour).HasColumnName(@"srpriceperhour").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().Property(x => x.Srpricepershift).HasColumnName(@"srpricepershift").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().Property(x => x.ConvenienceFeeAmount).HasColumnName(@"conveniencefeeamount").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().Property(x => x.QBCreateInvoiceOnFail).HasColumnName(@"qb_create_invoice_on_fail").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.CombinedSettlement).HasColumnName(@"combined_settlement").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesClientCustomerID).HasColumnName(@"uses_client_customer_id").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.ConvenienceFeeMaxCCAmount).HasColumnName(@"convenience_fee_max_cc_amount").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().Property(x => x.UsesZeeWiseImport).HasColumnName(@"uses_zee_wise_import").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.NameOnApplication).HasColumnName(@"name_on_application").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Client>().Property(x => x.UsesFromExternalCheckout).HasColumnName(@"uses_from_external_checkout").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.ConvenienceFeeIsPercent).HasColumnName(@"convenience_fee_is_percent").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthAccessToken).HasColumnName(@"qboe_oauth_access_token").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthAccessTokenSecret).HasColumnName(@"qboe_oauth_access_token_secret").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Client>().Property(x => x.UsesSlCreatePublicUser).HasColumnName(@"uses_sl_create_public_user").HasColumnType(@"bool").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthRealmId).HasColumnName(@"qboe_oauth_realm_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthDataSource).HasColumnName(@"qboe_oauth_data_source").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.PauseCardVerify).HasColumnName(@"pause_card_verify").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QBCreateInvoiceOnRecurFail).HasColumnName(@"qb_create_invoice_on_recur_fail").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.InfoFromClientNeeded).HasColumnName(@"info_from_client_needed").HasColumnType(@"bool").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<Client>().Property(x => x.PreInvoiceMonthlyRecur).HasColumnName(@"pre_invoice_monthly_recur").HasColumnType(@"bool").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<Client>().Property(x => x.UsesSchoolLeader).HasColumnName(@"uses_school_leader").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesSalesForce).HasColumnName(@"uses_sales_force").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesSfCreatePublicUser).HasColumnName(@"uses_sf_create_public_user").HasColumnType(@"bool").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<Client>().Property(x => x.UsesAmexBlue).HasColumnName(@"uses_amex_blue").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesAdobeSign).HasColumnName(@"uses_adobe_sign").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.ProcessSptAsSingleTransaction).HasColumnName(@"process_spt_as_single_transaction").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesQbLocations).HasColumnName(@"uses_qb_locations").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesSchoolLeaderArOnly).HasColumnName(@"uses_school_leader_ar_only").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthVersion).HasColumnName(@"qboe_oauth_version").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthLastConnectTime).HasColumnName(@"qboe_oauth_last_connect_time").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QboeOauthLastRefreshTime).HasColumnName(@"qboe_oauth_last_refresh_time").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.QboeOauth2AccessToken).HasColumnName(@"qboe_oauth2_access_token").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(900);
            modelBuilder.Entity<Client>().Property(x => x.QboeOauth2LastConnectTime).HasColumnName(@"qboe_oauth2_last_connect_time").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesDocusign).HasColumnName(@"uses_docusign").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.EncKeyID).HasColumnName(@"enc_key_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.AffiliateID).HasColumnName(@"affiliate_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.UsesProcare).HasColumnName(@"uses_procare").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Client>().Property(x => x.AchConvenienceFeeAmount).HasColumnName(@"ach_convenience_fee_amount").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().Property(x => x.LateFeeCc).HasColumnName(@"late_fee_cc").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().Property(x => x.LateFeeAch).HasColumnName(@"late_fee_ach").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Client>().HasKey(@"ClientID");
        }

        partial void CustomizeClientMapping(ModelBuilder modelBuilder);

        #endregion

        #region PayOnlineMerchantCredential Mapping

        private void PayOnlineMerchantCredentialMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PayOnlineMerchantCredential>().ToTable(@"payonline_merchant_credentials", @"public");
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.CredentialID).HasColumnName(@"credential_id").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_merchant_credentials_credential_id_seq'::regclass)");
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.PortalID).HasColumnName(@"portal_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.PayonlineProcessorID).HasColumnName(@"payonline_processor_id").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.CreateDate).HasColumnName(@"create_date").HasColumnType(@"timestamp").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"now()");
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.CreatedBy).HasColumnName(@"created_by").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.EditDate).HasColumnName(@"edit_date").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.EditedBy).HasColumnName(@"edited_by").HasColumnType(@"uuid").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.LastPwdChg).HasColumnName(@"last_pwd_chg").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.ProcessorID).HasColumnName(@"processor_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(205);
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.UserName).HasColumnName(@"user_name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(205);
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.MerchantID).HasColumnName(@"merchant_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.Key).HasColumnName(@"key").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.WPOCredentialID).HasColumnName(@"wpo_credential_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.MobileWorkerID).HasColumnName(@"mobile_worker_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.ProcessTypeID).HasColumnName(@"process_type_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().Property(x => x.EncKeyID).HasColumnName(@"enc_key_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlineMerchantCredential>().HasKey(@"CredentialID");
        }

        partial void CustomizePayOnlineMerchantCredentialMapping(ModelBuilder modelBuilder);

        #endregion

        #region Payment Mapping

        private void PaymentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Payment>().ToTable(@"payonline_payments", @"public");
            modelBuilder.Entity<Payment>().Property(x => x.PaymentID).HasColumnName(@"paymentid").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_payments_paymentid_seq'::regclass)");
            modelBuilder.Entity<Payment>().Property(x => x.UserID).HasColumnName(@"userid").HasColumnType(@"uuid").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.Last4CC).HasColumnName(@"last4cc").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Payment>().Property(x => x.CreatedOn).HasColumnName(@"createdon").HasColumnType(@"timestamp").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedon").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.BusinessName).HasColumnName(@"nameofbusiness").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<Payment>().Property(x => x.InvoiceNumber).HasColumnName(@"invoicenumber").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Payment>().Property(x => x.DynamicFieldVal).HasColumnName(@"dynamicfieldval").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Payment>().Property(x => x.DynamicFieldVal2).HasColumnName(@"dynamicfieldval2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<Payment>().Property(x => x.PortalID).HasColumnName(@"payonlineportalid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.PayerFirstName).HasColumnName(@"payerfirstname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Payment>().Property(x => x.PayerLastName).HasColumnName(@"payerlastname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Payment>().Property(x => x.ACHName).HasColumnName(@"achname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<Payment>().Property(x => x.ARProfileID).HasColumnName(@"arprofileid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.SubscriptionID).HasColumnName(@"subscriptionid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.SentToQB).HasColumnName(@"senttoqb").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.LoyaltyCampaignID).HasColumnName(@"loyaltycampaignid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.LastQBTransferMessage).HasColumnName(@"lastqbtransfermessage").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(850);
            modelBuilder.Entity<Payment>().Property(x => x.IsFromMobile).HasColumnName(@"isfrommobile").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.SpecialTypeID).HasColumnName(@"specialtypeid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property(x => x.Total).HasColumnName(@"total").HasColumnType(@"numeric").IsRequired().ValueGeneratedNever().HasPrecision(9, 2).HasDefaultValueSql(@"0");
            modelBuilder.Entity<Payment>().Property(x => x.SpecialTypeOptionID).HasColumnName(@"special_type_option_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Payment>().HasKey(@"PaymentID");
        }

        partial void CustomizePaymentMapping(ModelBuilder modelBuilder);

        #endregion

        #region PayOnlinePortal Mapping

        private void PayOnlinePortalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PayOnlinePortal>().ToTable(@"payonline_portals", @"public");
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.PayOnlinePortalID).HasColumnName(@"payonlineportalid").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_portals_payonlineportalid_seq'::regclass)");
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.AddedDate).HasColumnName(@"addeddate").HasColumnType(@"timestamp").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.EditDate).HasColumnName(@"editdate").HasColumnType(@"timestamp").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.AdminUserID).HasColumnName(@"userid").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.HeaderColor).HasColumnName(@"headercolor").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.LogoWidth).HasColumnName(@"logowidth").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.LogoHeight).HasColumnName(@"logoheight").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.BGTextColor).HasColumnName(@"bgtextcolor").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.RefundPolicy).HasColumnName(@"refundpolicy").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesNameOfBusiness).HasColumnName(@"usesnameofbusiness").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesInvoiceNumber).HasColumnName(@"usesinvoicenumber").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesDynamicField).HasColumnName(@"usesdynamicfield").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.DynamicFieldTitle).HasColumnName(@"dynamicfieldtitle").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.DynamicFieldRequired).HasColumnName(@"dynamicfieldrequired").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesDynamicField2).HasColumnName(@"usesdynamicfield2").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.DynamicField2Title).HasColumnName(@"dynamicfield2title").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.DynamicField2Required).HasColumnName(@"dynamicfield2required").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.URLSlug).HasColumnName(@"urlslug").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ClientID).HasColumnName(@"clientid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.PortalTypeID).HasColumnName(@"portaltypeid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.HomepageInstructions).HasColumnName(@"homepageinstructions").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.PaymentPageInstructions).HasColumnName(@"paymentpageinstructions").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ReceiptExtraText).HasColumnName(@"receiptextratext").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.PaymentTypesAllowed).HasColumnName(@"paymenttypesallowed").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesInvoices).HasColumnName(@"usesinvoices").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.BannerText).HasColumnName(@"bannertext").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseMasterCard).HasColumnName(@"usemastercard").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseVisa).HasColumnName(@"usevisa").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseAmex).HasColumnName(@"useamex").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesLoyaltyProgram).HasColumnName(@"usesloyaltyprogram").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.CSCOptional).HasColumnName(@"cscoptional").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseAnyDaySubscriptions).HasColumnName(@"useanydaysubscriptions").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseWeeklySubscriptions).HasColumnName(@"useweeklysubscriptions").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseDelayPay).HasColumnName(@"usedelaypay").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.Processor).HasColumnName(@"processor").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ACHProcessor).HasColumnName(@"achprocessor").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.BackgroundImage).HasColumnName(@"backgroundimage").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.PublicSitePayContainerHeader).HasColumnName(@"publicsitepaycontainerheader").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseDiscover).HasColumnName(@"usediscover").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseSplitPay).HasColumnName(@"usesplitpay").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.SendARReceiptToCustomer).HasColumnName(@"sendarreceipttocustomer").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.SendARReceiptToClient).HasColumnName(@"sendarreceipttoclient").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.SendPublicReceiptToClient).HasColumnName(@"sendpublicreceipttoclient").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseNagMail).HasColumnName(@"usenagmail").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ReceiptTitle).HasColumnName(@"receipttitle").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseQBNames).HasColumnName(@"useqbnames").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UseClientEmailForReceipt).HasColumnName(@"useclientemailforreceipt").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ClassIDToFilterFor).HasColumnName(@"classidtofilterfor").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ReceiptEmail).HasColumnName(@"receiptemail").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(80);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.UsesCustomAmountTabulation).HasColumnName(@"usescustomamounttabulation").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.CustomAmountText).HasColumnName(@"customamounttext").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ECommTheme).HasColumnName(@"ecommtheme").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.LastTsysPwdChg).HasColumnName(@"last_tsys_pwd_chg").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ACHPayonlineProcessorID).HasColumnName(@"ach_payonline_processor_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.CCPayonlineProcessorID).HasColumnName(@"cc_payonline_processor_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.RetailPayonlineProcessorID).HasColumnName(@"retail_payonline_processor_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.FailEmail).HasColumnName(@"fail_email").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(80);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.Active).HasColumnName(@"active").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ConvFeeExclude).HasColumnName(@"conv_fee_exclude").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.InvoiceNumberRequired).HasColumnName(@"invoice_number_required").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.AdobeSignAbbreviation).HasColumnName(@"adobe_sign_abbreviation").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.LocationId).HasColumnName(@"location_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().Property(x => x.ProcessACHAsCCD).HasColumnName(@"process_ach_as_ccd").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PayOnlinePortal>().HasKey(@"PayOnlinePortalID");
        }

        partial void CustomizePayOnlinePortalMapping(ModelBuilder modelBuilder);

        #endregion

        #region PayOnlinePortaltype Mapping

        private void PayOnlinePortaltypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PayOnlinePortaltype>().ToTable(@"payonline_portaltypes", @"public");
            modelBuilder.Entity<PayOnlinePortaltype>().Property(x => x.PortaltypeID).HasColumnName(@"portaltypeid").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_portaltypes_portaltypeid_seq'::regclass)");
            modelBuilder.Entity<PayOnlinePortaltype>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayOnlinePortaltype>().HasKey(@"PortaltypeID");
        }

        partial void CustomizePayOnlinePortaltypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Transaction Mapping

        private void TransactionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Transaction>().ToTable(@"payonline_transactions", @"public");
            modelBuilder.Entity<Transaction>().Property(x => x.TransactionID).HasColumnName(@"transactionid").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_transactions_transactionid_seq'::regclass)");
            modelBuilder.Entity<Transaction>().Property(x => x.PaymentID).HasColumnName(@"paymentid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.TransactionDate).HasColumnName(@"transactiondate").HasColumnType(@"timestamp").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.Response).HasColumnName(@"response").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.ResponseText).HasColumnName(@"responsetext").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1500);
            modelBuilder.Entity<Transaction>().Property(x => x.AuthCode).HasColumnName(@"authcode").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.TDTransactionID).HasColumnName(@"tdtransactionid").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.AVSResponse).HasColumnName(@"avsresponse").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Transaction>().Property(x => x.CVVResponse).HasColumnName(@"cvvresponse").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Transaction>().Property(x => x.ResponseCode).HasColumnName(@"responsecode").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.TransactionType).HasColumnName(@"transactiontype").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.SubscriptionID).HasColumnName(@"subscriptionid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.RebateID).HasColumnName(@"rebateid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.CardType).HasColumnName(@"cardtype").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Transaction>().Property(x => x.PortalID).HasColumnName(@"portalid").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.PayeeID).HasColumnName(@"payeeid").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<Transaction>().Property(x => x.Last4CC).HasColumnName(@"last4cc").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<Transaction>().Property(x => x.IPAddress).HasColumnName(@"ipaddress").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"numeric").ValueGeneratedNever().HasPrecision(9, 2);
            modelBuilder.Entity<Transaction>().Property(x => x.EmployeePaymentID).HasColumnName(@"employee_payment_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.EmployeePayoutID).HasColumnName(@"employee_payout_id").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.SentToQb).HasColumnName(@"sent_to_qb").HasColumnType(@"bool").ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<Transaction>().HasKey(@"TransactionID");
        }

        partial void CustomizeTransactionMapping(ModelBuilder modelBuilder);

        #endregion

        #region Role Mapping

        private void RoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Role>().ToTable(@"roles", @"public");
            modelBuilder.Entity<Role>().Property(x => x.RoleID).HasColumnName(@"roleid").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Role>().Property(x => x.RoleName).HasColumnName(@"rolename").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<Role>().Property(x => x.LoweredRoleName).HasColumnName(@"loweredrolename").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<Role>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<Role>().HasKey(@"RoleID");
        }

        partial void CustomizeRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region StateProvince Mapping

        private void StateProvinceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StateProvince>().ToTable(@"state_provinces", @"public");
            modelBuilder.Entity<StateProvince>().Property(x => x.StateProvinceID).HasColumnName(@"stateprovinceid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.StateProvinceCode).HasColumnName(@"stateprovincecode").HasColumnType(@"char").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<StateProvince>().Property(x => x.CountryRegionCode).HasColumnName(@"countryregioncode").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<StateProvince>().Property(x => x.IsOnlyStateProvinceFlag).HasColumnName(@"isonlystateprovinceflag").HasColumnType(@"bool").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<StateProvince>().Property(x => x.TerritoryID).HasColumnName(@"territoryid").HasColumnType(@"int4").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.RowGuid).HasColumnName(@"rowguid").HasColumnType(@"uuid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().Property(x => x.ModifiedDate).HasColumnName(@"modifieddate").HasColumnType(@"timestamp").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StateProvince>().HasKey(@"StateProvinceID");
        }

        partial void CustomizeStateProvinceMapping(ModelBuilder modelBuilder);

        #endregion

        #region PayonlineProcessor Mapping

        private void PayonlineProcessorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PayonlineProcessor>().ToTable(@"payonline_processors", @"public");
            modelBuilder.Entity<PayonlineProcessor>().Property(x => x.ProcessorID).HasColumnName(@"processor_id").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_processors_processor_id_seq'::regclass)");
            modelBuilder.Entity<PayonlineProcessor>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayonlineProcessor>().HasKey(@"ProcessorID");
        }

        partial void CustomizePayonlineProcessorMapping(ModelBuilder modelBuilder);

        #endregion

        #region PayonlineProcessType Mapping

        private void PayonlineProcessTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PayonlineProcessType>().ToTable(@"payonline_process_types", @"public");
            modelBuilder.Entity<PayonlineProcessType>().Property(x => x.ProcessTypeId).HasColumnName(@"process_type_id").HasColumnType(@"int4").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"nextval('payonline_process_types_process_type_id_seq'::regclass)");
            modelBuilder.Entity<PayonlineProcessType>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PayonlineProcessType>().HasKey(@"ProcessTypeId");
        }

        partial void CustomizePayonlineProcessTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUser Mapping

        private void AspNetUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUser>().ToTable(@"asp_net_users", @"core_identity");
            modelBuilder.Entity<AspNetUser>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUser>().Property(x => x.UserName).HasColumnName(@"user_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.NormalizedUserName).HasColumnName(@"normalized_user_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.NormalizedEmail).HasColumnName(@"normalized_email").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.EmailConfirmed).HasColumnName(@"email_confirmed").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PasswordHash).HasColumnName(@"password_hash").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.SecurityStamp).HasColumnName(@"security_stamp").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.ConcurrencyStamp).HasColumnName(@"concurrency_stamp").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PhoneNumber).HasColumnName(@"phone_number").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PhoneNumberConfirmed).HasColumnName(@"phone_number_confirmed").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.TwoFactorEnabled).HasColumnName(@"two_factor_enabled").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.LockoutEnd).HasColumnName(@"lockout_end").HasColumnType(@"timestamptz").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.LockoutEnabled).HasColumnName(@"lockout_enabled").HasColumnType(@"bool").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.AccessFailedCount).HasColumnName(@"access_failed_count").HasColumnType(@"int4").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.FullName).HasColumnName(@"full_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().HasKey(@"Id");
            modelBuilder.Entity<AspNetUser>().HasIndex(@"NormalizedUserName").IsUnique(true);
            modelBuilder.Entity<AspNetUser>().HasIndex(@"NormalizedEmail").IsUnique(true);
            modelBuilder.Entity<AspNetUser>().HasIndex(@"ConcurrencyStamp").IsUnique(true);
        }

        partial void CustomizeAspNetUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetRole Mapping

        private void AspNetRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRole>().ToTable(@"asp_net_roles", @"core_identity");
            modelBuilder.Entity<AspNetRole>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetRole>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().Property(x => x.NormalizedName).HasColumnName(@"normalized_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().Property(x => x.ConcurrencyStamp).HasColumnName(@"concurrency_stamp").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().HasKey(@"Id");
            modelBuilder.Entity<AspNetRole>().HasIndex(@"NormalizedName").IsUnique(true);
            modelBuilder.Entity<AspNetRole>().HasIndex(@"ConcurrencyStamp").IsUnique(true);
        }

        partial void CustomizeAspNetRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUserClaim Mapping

        private void AspNetUserClaimMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserClaim>().ToTable(@"asp_net_user_claims", @"core_identity");
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.ClaimType).HasColumnName(@"claim_type").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserClaim>().Property(x => x.ClaimValue).HasColumnName(@"claim_value").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserClaim>().HasKey(@"Id");
        }

        partial void CustomizeAspNetUserClaimMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUserLogin Mapping

        private void AspNetUserLoginMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserLogin>().ToTable(@"asp_net_user_logins", @"core_identity");
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.LoginProvider).HasColumnName(@"login_provider").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.ProviderKey).HasColumnName(@"provider_key").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.ProviderDisplayName).HasColumnName(@"provider_display_name").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserLogin>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUserLogin>().HasKey(@"LoginProvider", @"ProviderKey");
        }

        partial void CustomizeAspNetUserLoginMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUserToken Mapping

        private void AspNetUserTokenMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserToken>().ToTable(@"asp_net_user_tokens", @"core_identity");
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.LoginProvider).HasColumnName(@"login_provider").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUserToken>().HasKey(@"UserId", @"LoginProvider", @"Name");
        }

        partial void CustomizeAspNetUserTokenMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetRoleClaim Mapping

        private void AspNetRoleClaimMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRoleClaim>().ToTable(@"asp_net_role_claims", @"core_identity");
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.RoleId).HasColumnName(@"role_id").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.ClaimType).HasColumnName(@"claim_type").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRoleClaim>().Property(x => x.ClaimValue).HasColumnName(@"claim_value").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRoleClaim>().HasKey(@"Id");
        }

        partial void CustomizeAspNetRoleClaimMapping(ModelBuilder modelBuilder);

        #endregion

        #region RefreshToken Mapping

        private void RefreshTokenMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RefreshToken>().ToTable(@"refresh_tokens", @"core_identity");
            modelBuilder.Entity<RefreshToken>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"serial").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<RefreshToken>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<RefreshToken>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Expires).HasColumnName(@"expires").HasColumnType(@"timestamptz").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Created).HasColumnName(@"created").HasColumnType(@"timestamptz").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"now()");
            modelBuilder.Entity<RefreshToken>().Property(x => x.CreatedByIp).HasColumnName(@"created_by_ip").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.Revoked).HasColumnName(@"revoked").HasColumnType(@"timestamptz").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.RevokedByIp).HasColumnName(@"revoked_by_ip").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.ReplacedByToken).HasColumnName(@"replaced_by_token").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().Property(x => x.ReasonRevoked).HasColumnName(@"reason_revoked").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<RefreshToken>().HasKey(@"Id");
        }

        partial void CustomizeRefreshTokenMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().HasMany(x => x.AdminClients).WithOne(op => op.PayEzCreator).HasForeignKey(@"AddedByID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Payments).WithOne(op => op.User).HasForeignKey(@"UserID").IsRequired(false);
            modelBuilder.Entity<User>().HasMany(x => x.Portals).WithOne(op => op.User).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"AdminUserID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Roles).WithMany(op => op.Users)
                .UsingEntity<Dictionary<string, object>>(
                    @"usersinroles",
                    x => x.HasOne<Role>().WithMany().HasPrincipalKey(@"RoleID").HasForeignKey(@"roleid"),
                    x => x.HasOne<User>().WithMany().HasPrincipalKey(@"UserID").HasForeignKey(@"userid")
                )
                .ToTable(@"usersinroles", @"public");
            modelBuilder.Entity<User>().HasOne(x => x.Client).WithMany(op => op.Users_ClientID).HasForeignKey(@"ClientID").IsRequired(false);
            modelBuilder.Entity<User>().HasOne(x => x.AspNetUser).WithMany().HasForeignKey(@"AspNetUserId").IsRequired(false);

            modelBuilder.Entity<Client>().HasOne(x => x.PayEzCreator).WithMany(op => op.AdminClients).HasForeignKey(@"AddedByID").IsRequired(true);
            modelBuilder.Entity<Client>().HasMany(x => x.Portals).WithOne(op => op.PayonlineClient).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"ClientID").IsRequired(true);
            modelBuilder.Entity<Client>().HasMany(x => x.Users_ClientID).WithOne(op => op.Client).HasForeignKey(@"ClientID").IsRequired(false);
            modelBuilder.Entity<Client>().HasOne(x => x.StateProvince).WithMany(op => op.Clients).HasForeignKey(@"StateProvinceID").IsRequired(true);

            modelBuilder.Entity<PayOnlineMerchantCredential>().HasOne(x => x.PayonlinePortal).WithMany(op => op.PayonlineMerchantCredentials).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"PortalID").IsRequired(false);
            modelBuilder.Entity<PayOnlineMerchantCredential>().HasOne(x => x.CC_Credentail).WithMany(op => op.MerchantCredentials).HasForeignKey(@"PayonlineProcessorID").IsRequired(true);
            modelBuilder.Entity<PayOnlineMerchantCredential>().HasOne(x => x.ACH_Credential).WithMany(op => op.PayOnlineMerchantCredentials_PayonlineProcessorID1).HasForeignKey(@"PayonlineProcessorID").IsRequired(true);
            modelBuilder.Entity<PayOnlineMerchantCredential>().HasOne(x => x.PayonlineProcessType).WithMany(op => op.PayOnlineMerchantCredentials).HasForeignKey(@"ProcessTypeID").IsRequired(false);

            modelBuilder.Entity<Payment>().HasOne(x => x.Portal).WithMany(op => op.PayonlinePayments).HasForeignKey(@"PortalID").IsRequired(true);
            modelBuilder.Entity<Payment>().HasOne(x => x.User).WithMany(op => op.Payments).HasForeignKey(@"UserID").IsRequired(false);
            modelBuilder.Entity<Payment>().HasMany(x => x.Transactions).WithOne(op => op.Payment).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"PaymentID").IsRequired(false);

            modelBuilder.Entity<PayOnlinePortal>().HasMany(x => x.PayonlineMerchantCredentials).WithOne(op => op.PayonlinePortal).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"PortalID").IsRequired(false);
            modelBuilder.Entity<PayOnlinePortal>().HasMany(x => x.PayonlinePayments).WithOne(op => op.Portal).HasForeignKey(@"PortalID").IsRequired(true);
            modelBuilder.Entity<PayOnlinePortal>().HasOne(x => x.PayonlineClient).WithMany(op => op.Portals).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"ClientID").IsRequired(true);
            modelBuilder.Entity<PayOnlinePortal>().HasOne(x => x.PayonlinePortaltype).WithMany(op => op.PayOnlinePortals).HasForeignKey(@"PortalTypeID").IsRequired(true);
            modelBuilder.Entity<PayOnlinePortal>().HasOne(x => x.User).WithMany(op => op.Portals).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"AdminUserID").IsRequired(true);
            modelBuilder.Entity<PayOnlinePortal>().HasOne(x => x.ACHPayOnlineProcessor).WithMany(op => op.ACHPortals).HasForeignKey(@"ACHPayonlineProcessorID").IsRequired(false);
            modelBuilder.Entity<PayOnlinePortal>().HasOne(x => x.CCPayOnlineProcessor).WithMany(op => op.CCPortals).HasForeignKey(@"CCPayonlineProcessorID").IsRequired(false);
            modelBuilder.Entity<PayOnlinePortal>().HasOne(x => x.RetailPayonlineProcessor).WithMany(op => op.RetailPortals).HasForeignKey(@"RetailPayonlineProcessorID").IsRequired(false);

            modelBuilder.Entity<PayOnlinePortaltype>().HasMany(x => x.PayOnlinePortals).WithOne(op => op.PayonlinePortaltype).HasForeignKey(@"PortalTypeID").IsRequired(true);

            modelBuilder.Entity<Transaction>().HasOne(x => x.Payment).WithMany(op => op.Transactions).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"PaymentID").IsRequired(false);

            modelBuilder.Entity<StateProvince>().HasMany(x => x.Clients).WithOne(op => op.StateProvince).HasForeignKey(@"StateProvinceID").IsRequired(true);

            modelBuilder.Entity<PayonlineProcessor>().HasMany(x => x.MerchantCredentials).WithOne(op => op.CC_Credentail).HasForeignKey(@"PayonlineProcessorID").IsRequired(true);
            modelBuilder.Entity<PayonlineProcessor>().HasMany(x => x.PayOnlineMerchantCredentials_PayonlineProcessorID1).WithOne(op => op.ACH_Credential).HasForeignKey(@"PayonlineProcessorID").IsRequired(true);
            modelBuilder.Entity<PayonlineProcessor>().HasMany(x => x.ACHPortals).WithOne(op => op.ACHPayOnlineProcessor).HasForeignKey(@"ACHPayonlineProcessorID").IsRequired(false);
            modelBuilder.Entity<PayonlineProcessor>().HasMany(x => x.CCPortals).WithOne(op => op.CCPayOnlineProcessor).HasForeignKey(@"CCPayonlineProcessorID").IsRequired(false);
            modelBuilder.Entity<PayonlineProcessor>().HasMany(x => x.RetailPortals).WithOne(op => op.RetailPayonlineProcessor).HasForeignKey(@"RetailPayonlineProcessorID").IsRequired(false);

            modelBuilder.Entity<PayonlineProcessType>().HasMany(x => x.PayOnlineMerchantCredentials).WithOne(op => op.PayonlineProcessType).HasForeignKey(@"ProcessTypeID").IsRequired(false);

            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetUserClaims).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetUserLogins).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetUserTokens).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.RefreshTokens).WithOne(op => op.AspNetUser).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.AspNetRoles).WithMany(op => op.AspNetUsers)
                .UsingEntity<Dictionary<string, object>>(
                    @"asp_net_user_roles",
                    x => x.HasOne<AspNetRole>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"role_id"),
                    x => x.HasOne<AspNetUser>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"user_id")
                )
                .ToTable(@"asp_net_user_roles", @"core_identity");

            modelBuilder.Entity<AspNetRole>().HasMany(x => x.AspNetRoleClaims).WithOne(op => op.AspNetRole).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(false);

            modelBuilder.Entity<AspNetUserClaim>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserClaims).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);

            modelBuilder.Entity<AspNetUserLogin>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserLogins).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(false);

            modelBuilder.Entity<AspNetUserToken>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserTokens).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<AspNetRoleClaim>().HasOne(x => x.AspNetRole).WithMany(op => op.AspNetRoleClaims).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(false);

            modelBuilder.Entity<RefreshToken>().HasOne(x => x.AspNetUser).WithMany(op => op.RefreshTokens).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
